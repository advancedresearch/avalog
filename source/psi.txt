// # Path Semantical Intuitionistic Logic (PSI)
//
// Instructions:
//
// - Add `(tr, a)` to express that `a` is true.
// - Add `(a, fa)` to express that `a` is false.
// - Add `(tr, inf)` to enable non-terminating rules.

// Contradiction if true implies false.
amb :- (tr, fa).

// Self-implication.
(X, X) :- (X, Y).

// Transitivity of implication.
(X, Z) :- (X, Y), (Y, Z), Z != T'(U).

// Lowering of quality.
(X, Y) :- (X, q'(Y)).

// Quality (like equality but non-reflexive).
(X, q'(Y)) :- (X, Y), (Y, X), X != Y.

// Transitivity of quality.
(X, q'(Z)) :- (X, q'(Y)), (Y, q'(Z)).

// Symmetry of quality.
(Y, q'(X)) :- (X, q'(Y)).

// ### Intuitionistic logic

// Modus ponens is covered by transitivity of implication `(tr, X)`.

// Then-1.
(Y, X) :- (tr, X), (Y, Z).

// Then-2.
(imply(X, Y), imply(X, Z)) :- (X, imply(Y, Z)).

// And-1.
(tr, X) :- (tr, and(X, Y)).

// And-2.
(tr, Y) :- (tr, and(X, Y)).

// And-3.
(Y, and(X, Y)) :- (tr, inf), (tr, X), (Y, Z).

// Or-1.
(tr, or(X, Y)) :- (tr, inf), (tr, X), (Y, Z).

// False.
// This also holds for Y due to transitivity of implication.
(fa, X) :- (X, Y), X != T'(U).

// ### Other axioms

// Lift implication to expression.
(tr, imply(X, Y)) :- (tr, inf), (X, Y).

// Lowering of implication.
(X, Y) :- (tr, imply(X, Y)).

// Lift pairs of implications to expressions.
(tr, and(imply(X, Y), imply(Z, W))) :- (tr, inf), (X, Y), (Z, W).

// Double negation lift (constructive).
(imply(X, fa), fa) :- (tr, inf), (tr, X).

// Core axiom of Path Semantics
(X0, q'(X1)) :- (F0, q'(F1)), (F0, X0), (F1, X1), (F0, gt'(X0)), (F1, gt'(X1)).

// Other axioms for greater-than relation.
// These are used to support path semantical levels.
(X, gt'(Z)) :- (X, gt'(Y)), (Y, gt'(Z)).
(X, gt'(Y)) :- (X, z), (Y, s'(z)).
(X, gt'(Y)) :- (X, s'(N)), (Y, s'(M)), (N, gt'(M)).

// Natural numbers.
uniq s
z : nat
s'(X) : nat :- X : nat, (tr, inf).
X : nat :- s'(X) : nat.
(X, gt'(s'(X))) :- s'(X) : nat.

// Set maximum number of path semantical levels for terminating rules.
// s'(s'(z)) : nat
s'(z) : nat

